runtime macros/matchit.vim

set number

" Prefer toggle ALEFix manually
let g:ale_enabled=0

" Disable ALEFix on save
let g:ale_fix_on_save = 0

" mark copilot as enabled for the funcion below
let g:copilot_enabled = 1

if !exists("g:vim_ai_chat")
  let g:vim_ai_chat = {
  \  "options": {
  \    "model": "gpt-4",
  \  }
  \}
endif

syntax enable
set background=light
colorscheme solarized
let g:solarized_termcolors=256

" Ggrep for word under cursor
nnoremap <leader>g :execute 'silent! Ggrep ' . expand('<cword>')<CR>

" trigger chat
xnoremap <leader>c :AIChat<CR>
nnoremap <leader>c :AIChat<CR>
nnoremap <leader>C :vnew<CR>:AIChat<CR>:wincmd k<CR>:q<CR>
xnoremap <leader>C :vnew<CR>:AIChat<CR>:wincmd k<CR>:q<CR>

" Re-write sessions automatically on save
autocmd BufWrite * call RewriteSession()

function! RewriteSession()
  if !empty(v:this_session)
    exe "mksession! " . v:this_session
  endif
endfunction

" Refresh CtrlP cache all the time
nnoremap <silent> <leader>f :ClearCtrlPCache<cr>\|:CtrlP<cr>

" Stop CtrlP from looking in useless directories
set wildignore+=*/.git/*,*/vendor,*/node_modules,*/bower_components,*/tmp

" Set and unset cursorline
autocmd BufEnter * set cursorline
autocmd BufLeave * set nocursorline

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e ~/.vimrc.local<CR>
nmap <silent> <leader>sv :so ~/.vimrc<CR>

nmap <silent> <leader>a :ALEToggle<CR>

nmap <silent> <leader>A :Copilot<CR>

iabbrev rpry binding.remote_pry

function! KillWhitespace()
  :silent %s/\t/  /g | %s/\s\+$//e
endfunction

function! ToggleCopilot()
    if exists("g:copilot_enabled") && g:copilot_enabled
        let g:copilot_enabled = 0
        :Copilot disable
        echo "Copilot disabled"
    else
        let g:copilot_enabled = 1
        :Copilot enable
        echo "Copilot enabled"
    endif
endfunction

nnoremap <Leader>A :call ToggleCopilot()<CR>
